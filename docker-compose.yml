services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-accelerate}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres_dev_password}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - accelerate-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  influxdb:
    image: influxdb:2.7-alpine
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: ${INFLUXDB_ADMIN_USER:-admin}
      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUXDB_ADMIN_PASSWORD:-influx_dev_password}
      DOCKER_INFLUXDB_INIT_ORG: ${INFLUXDB_ORG:-accelerate}
      DOCKER_INFLUXDB_INIT_BUCKET: ${INFLUXDB_BUCKET:-metrics}
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${INFLUXDB_ADMIN_TOKEN:-dev_token_please_change}
    ports:
      - "${INFLUXDB_PORT:-8086}:8086"
    volumes:
      - influxdb_data:/var/lib/influxdb2
    networks:
      - accelerate-network
    healthcheck:
      test: ["CMD", "influx", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_dev_password}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - accelerate-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    ports:
      - "${API_PORT:-3001}:3001"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres_dev_password}@postgres:5432/${POSTGRES_DB:-accelerate}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_dev_password}@redis:6379
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=${INFLUXDB_ADMIN_TOKEN:-dev_token_please_change}
      - INFLUXDB_ORG=${INFLUXDB_ORG:-accelerate}
      - INFLUXDB_BUCKET=${INFLUXDB_BUCKET:-metrics}
    depends_on:
      - postgres
      - redis
      - influxdb
    networks:
      - accelerate-network
    volumes:
      - ./api:/app
      - /app/node_modules

  ml-service:
    build:
      context: ./ml-service
      dockerfile: Dockerfile
    ports:
      - "${ML_SERVICE_PORT:-8000}:8000"
    environment:
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres_dev_password}@postgres:5432/${POSTGRES_DB:-accelerate}
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=${INFLUXDB_ADMIN_TOKEN:-dev_token_please_change}
      - INFLUXDB_ORG=${INFLUXDB_ORG:-accelerate}
      - INFLUXDB_BUCKET=${INFLUXDB_BUCKET:-metrics}
    depends_on:
      - postgres
      - influxdb
    networks:
      - accelerate-network
    volumes:
      - ./ml-service:/app

  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    ports:
      - "${WEB_PORT:-3000}:3000"
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:3001/api/v1}
    depends_on:
      - api
    networks:
      - accelerate-network
    volumes:
      - ./web:/app
      - /app/node_modules
      - /app/.next

volumes:
  postgres_data:
  influxdb_data:
  redis_data:

networks:
  accelerate-network:
    driver: bridge